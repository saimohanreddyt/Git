
Version Control System
------- ------- ------
> Version control is the management of changes to documents, computer programs, large web sites, and other collections of information. These changes are usually termed as "versions".
> Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. 

Storing Versions
------- --------
> Snapshots of all versions are properly documented and stored.
> Versions are also named accurently

Backup
------
In any case if your central server crashes, a backup is always avaliable in your local servers.

Analyze:
--------
	> VCS provides you with proper description
	> What exactly was changes
	> When it was changed
	And hence, you can analyze how your projects evolved between versions.


Git & GitHub
------------

Git
---
Git is a Distributed Version Control tool that supports distributed non-linear workflows by providing data assurance for developing quality software.
Git is a version control system that lets you manage and keep track of your source code history. 

Features of Git: Distributed, Compatible, Non-linear, Branching, Lightweight, Speed, Open Source, Reliable, Secure, Economical.  

Repository
----------
A directory or storage space where you projects can live. It can be local to a folder on your computer, or it can be a storage space on GitHub or another online host.
You can keep code files, text files, image files, you name it, inside a repository.

There are two types of repositories:
1. Central Repository : Tpically located on remote server
			Exclusively consists of ".git" repository folder
			Meant for team to share and exchange data

2. Local Repository  :	Typically located on local machine
			Resides as a .git folder inside your project's root
			Only admin of the machine can work with this repo

GitHub
------
GitHub is a cloud-based hosting service that lets you manage Git repositories. 

If you have open-source projects that use Git, then GitHub is designed to help you better manage them.


Git Operations & Commands
--- ---------- - --------

Creating repositories : git init

Making changes	      :	git status
			git add
			git commit

Syncing repositories  : git add origin
			git push
			git pull

Parallel development  : git branch
			git merge
			git rebase




git init : Install Git on your local machine and use "git init" to create your local repository.
---------
git clone: Download or clone your repository from Github.
---------
git remote add origin "<link>" : Use to add remote repo
------------------------------ 
git pull : Pull files from central repo. [git pull origin master]
---------
git push : Push your own changes into central repo.
---------
git status : Tells you which iles are added to index and are ready to commit.
-----------
git add : Lets you add files to your index. 
--------
git commit : It refers to recording snapshots of the repository at a given time.
----------   Committed snapshots will never change unless done explicitly.






…or create a new repository on the command line

echo "# Git" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/----gitname-------/Git.git
git push -u origin main

…or push an existing repository from the command line

git remote add origin https://github.com/g-----gitname------/Git.git
git branch -M main
git push -u origin main



git --version

git config --global user.name " "

git config --global user.email " "

git config --list

git help config
git config --help

git init
[rm -rf .git]

git add <file>

git status

git commit

git push

git pull

git clone

git log

-m

-A

-a


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

git branch firstbranch : Creating a different branch

git checkout firstbranch : Siwtched to branch "given"

 






git-add[1]

    Add file contents to the index
git-am[1]

    Apply a series of patches from a mailbox
git-archive[1]

    Create an archive of files from a named tree
git-bisect[1]

    Use binary search to find the commit that introduced a bug
git-branch[1]

    List, create, or delete branches
git-bundle[1]

    Move objects and refs by archive
git-checkout[1]

    Switch branches or restore working tree files
git-cherry-pick[1]

    Apply the changes introduced by some existing commits
git-citool[1]

    Graphical alternative to git-commit
git-clean[1]

    Remove untracked files from the working tree
git-clone[1]

    Clone a repository into a new directory
git-commit[1]

    Record changes to the repository
git-describe[1]

    Describe a commit using the most recent tag reachable from it
git-diff[1]

    Show changes between commits, commit and working tree, etc
git-fetch[1]

    Download objects and refs from another repository
git-format-patch[1]

    Prepare patches for e-mail submission
git-gc[1]

    Cleanup unnecessary files and optimize the local repository
git-grep[1]

    Print lines matching a pattern
git-gui[1]

    A portable graphical interface to Git
git-init[1]

    Create an empty Git repository or reinitialize an existing one
gitk[1]

    The Git repository browser
git-log[1]

    Show commit logs
git-merge[1]

    Join two or more development histories together
git-mv[1]

    Move or rename a file, a directory, or a symlink

git-notes[1]

    Add or inspect object notes
git-pull[1]

    Fetch from and integrate with another repository or a local branch
git-push[1]

    Update remote refs along with associated objects
git-rebase[1]

    Forward-port local commits to the updated upstream head
git-reset[1]

    Reset current HEAD to the specified state
git-revert[1]

    Revert some existing commits
git-rm[1]

    Remove files from the working tree and from the index
git-shortlog[1]

    Summarize git log output
git-show[1]

    Show various types of objects
git-stash[1]

    Stash the changes in a dirty working directory away
git-status[1]

    Show the working tree status
git-submodule[1]

    Initialize, update or inspect submodules
git-tag[1]

    Create, list, delete or verify a tag object signed with GPG
git-worktree[1]

    Manage multiple working trees

